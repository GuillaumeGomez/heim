on: [push, pull_request]

name: Tier 1 CI

jobs:
  tier1_ci:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        toolchain:
          - 1.39.0  # MSRV
          - stable
          - nightly
        runtime:
          - runtime-tokio
          - runtime-async-std
          - runtime-polyfill

    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo build target
        if: matrix.toolchain != 'nightly'
        uses: actions/cache@v1
        with:
          path: target
          key: target-${{ runner.os }}-${{ matrix.toolchain }}-${{ matrix.runtime }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --features ${{ matrix.runtime }} --manifest-path=heim/Cargo.toml
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib --tests --examples --no-fail-fast

  clippy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo build target
        uses: actions/cache@v1
        with:
          path: target
          key: target-clippy-${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets -- -D warnings

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  code_coverage:
    runs-on: ${{ matrix.os }}
    needs: tier1_ci
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        toolchain:
          - nightly

    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo build target
        uses: actions/cache@v1
        with:
          path: target
          key: target-coverage-${{ runner.os }}-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      # TODO: Remove that separation eventually
      # See https://github.com/rust-lang/rust/issues/63047#issuecomment-589849357
      - name: Execute tests (not macOS)
        if: startsWith(matrix.os, 'macOS') == false
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"

      - name: Execute tests (macOS)
        if: startsWith(matrix.os, 'macOS') == true
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Coverflow-checks=off -Zno-landing-pads"

      - name: Gather coverage data
        id: coverage
        uses: actions-rs/grcov@v0.1
        with:
          coveralls-token: ${{ secrets.COVERALLS_TOKEN }}

      - name: Coveralls upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel: true
          path-to-lcov: ${{ steps.coverage.outputs.report }}

  code_coverage_finalize:
    runs-on: ubuntu-latest
    needs: code_coverage
    steps:
      - name: Coveralls finalization
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
